import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df1 = pd.read_csv(r"calories.csv") 
df2 = pd.read_csv(r"exercise.csv") 
df = pd.merge(df1, df2, how='outer') 
df.head()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn import metrics
from sklearn.svm import SVC
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
df.shape
df.info()
sns.scatterplot(x = "Height", y ="Weight",data = df)
plt.show()

features = ['Age','Height','Weight','Duration']
plt.subplots(figsize = (15,10))
for i,col  in enumerate(features):
    plt.subplot(2,2,i+1)
    x = df.sample(1000)
    sns.scatterplot(x = col, y = 'Calories',data = df)
plt.tight_layout()
plt.show()

features = df.select_dtypes(include =  'float').columns
plt.subplots(figsize=(15,10))
for i,col in enumerate(features):
    plt.subplot(2,3,i+1)
    sns.distplot(df[col])
plt.tight_layout()
plt.show()


df.replace({'male':0,'female':1},inplace = True)
df.head()
plt.figure(figsize = (8,8))
sns.heatmap(df.corr()>0.9,annot = True,cbar = False)
plt.show()

to_remove = ['Weight','Duration']
df.drop(to_remove,axis = 1, inplace = True)
features = df.drop(['User_ID','Calories'],axis =1)
target = df['Calories'].values
x_train,x_test,y_train,y_test = train_test_split(features,target,test_size = 0.1,random_state = 22)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

from sklearn.metrics import mean_absolute_error as mae
models = [LinearRegression(), XGBRegressor(),
          Lasso(), RandomForestRegressor(), Ridge()]

for i in range(5):
    models[i].fit(x_train, y_train)

    print(f'{models[i]} : ')

    train_preds = models[i].predict(x_train)
    print('Training Error : ', mae(y_train, train_preds))

    val_preds = models[i].predict(x_test)
    print('Validation Error : ', mae(y_test, val_preds))
    print()
#The best suitable for this project were Random forest Regressor and Xgboost regressor
